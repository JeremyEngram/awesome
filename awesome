#!/usr/bin/env bash

version="0.1.1"
awesome_dir="$HOME/awesome"
bin_dir="$HOME/bin"
# check if awesome dir exist. if not create it and add $HOME/awesome path to config file
fn_checkOrmkdir() {
    if [[ -z $1 ]]; then
        echo "Specify the directory." >&2
        exit
    fi
    if [[ ! -d $1 ]]; then
        mkdir "$1"
        echo "$1 directory is created." >&2
        return
    fi
}

fn_checkDir() {
    if [[ -d $1 ]]; then
        return
    else
        echo "Ooops! $1 doesn't exist." >&2
        exit
    fi
}

fn_check_cmd() {
    if [ ! "$(command -v "$1")" ]; then
        echo "Please install $1" >&2
        exit 1
    fi
}

fn_confirmRemove() {
    local package=$1
    read -rp "Do you want to remove $package? yes/y or no/n   " PANS

    ans=$(echo "$PANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

    echo $ans
}

# search the main script. if $2 is provided use it as script_name otherwise use $1 as script_name
fn_search_main() {
    repo=$1
    cd "$awesome_dir/$repo" || return
    if [[ -n $2 ]]; then
        script_name=$2
    else
        script_name="$repo"
    fi
    IFS= read -r -d '' repo < <(find . '(' -name "${script_name##*/}" -o -name "${script_name##*/}.sh" ')' -print0)

    if [[ $repo ]]; then
        printf '%s\n' $(basename $repo)
    else
        return 1
    fi
}

# create a symlink in bin. repo_name and file_name can be different
fn_create_symlink() {
    # find the name of repo
    base_name=$1
    repo_name=$(basename $2)
    filename="${repo_name%.*}"
    echo $filename
    # echo $repo_name
    # exit
    # echo '${awesome_dir}/${base_name}/${repo_name}'
    # add a symlink
    ln -sf "${awesome_dir}/$1/$2" "${bin_dir}/$filename"
    echo "Created a symlink."
    exit
}

fn_src_path() {
    src_path=$(realpath "$HOME/bin/$1")
    echo "${src_path%/*}"
}

fn_remove_dir() {
    repo=$1
    src_path=$2
    # confirm
    if [[ $(fn_confirmRemove "$src_path") = "Y" ]]; then
        echo "Removing the ${src_path} directory ..."
        rm -rf "${src_path}" || exit
        echo "$repo directory removed."
    fi
    return
}

# fn_remove removes a symlink
fn_remove_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    fi
    repo=$1
    src_path=$2

    # check if the dir exist || exit
    if [[ $(fn_confirmRemove "$src_path") = "Y" ]]; then
        echo "Removing the ${src_path} symlink ..."
        fn_remove_symlink ${src_path} || exit
        echo "$repo symlink removed."
    fi
    echo "Removing the symlink ..."
    cd "$bin_dir" || exit
    rm "${1}" || exit
    echo "Symlink removed." >&2
    exit
}

fn_add_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    fi
    fn_create_symlink "$1" || exit
    echo "Symlink added." >&2
    exit
}

# fn_install run git clone and create a symlink
fn_install() {
    fn_checkOrmkdir "$awesome_dir"
    fn_checkOrmkdir "$bin_dir"
    fn_check_cmd git

    if [[ -z $1 ]]; then
        echo "You need to specify the GitHub repo URL." >&2
        exit 1
    else
        url=$1
    fi
    repo_base=$(basename "$url" .git)

    if [[ -n $2 ]]; then
        script_name=$2
    else
        script_name="$repo_base"
    fi

    cd "$awesome_dir" || return
    echo "Cloning ..."
    git clone "${url}" || exit
    echo "Cloning done."
    # run fn_search_main to find out the main script
    file_name=$(fn_search_main ${repo_base} ${script_name}) || exit 1
    # echo "Creating a symlink ..."
    # fn_create_symlink $repo_base $file_name || eixt
    fn_create_symlink "${repo_base}" "${file_name}" || exit
    echo "${repo} installation completed." >&2
    echo "Try ${repo} -h or which ${repo}." >&2
}

# fn_uninstall removes a symlink and repo
fn_uninstall() {
    cd "$awesome_dir" || exit
    repo=$1
    # find the realpath (source)
    src_path=$(fn_src_path "$repo")
    echo "src path: $src_path"
    # use realpath to find the real dir
    fn_checkDir "$src_path"
    # remove a dir
    fn_remove_dir "$repo" "$src_path"
    # remove a symlink
    fn_remove_symlink "$repo" "$src_path"
    exit
}

# fn_update run git pull
fn_update() {
    cd "$awesome_dir/${1}" || exit
    git pull || exit
    exit
}

# fn_list list installed packages
fn_list() {
    ls "$awesome_dir"
    exit
}

fn_help() {
    cat <<EOF
Description: Awesome install a package from a GitHub repo on your macOS/Linux.

Usage: awesome [-h] [command]
    -i | install installs a package from a GitHub repo and create a symlink in ~/bin
    rm           uninstalls a package and remove a symlink
    ls | list    lists awesome packages
    link         adds a symlink
    unlink       remove a package symlink 
    -u | update  checks an update and install a new package
    -h, --help   shows this help message and exit"

Examples:
    Install a package
    awesome install https://github.com/shinokada/gitstart.git

    Uninstall a package
    awesome uninstall gitstart

    Update a package
    awesome update gitstart

    Show installed packages
    awesome list

    Remove a symlink
    awesome remove gitstart

    Show this help
    awesome -h
EOF
    exit
}

fn_main() {
    if (($# > 0)); then
        case $1 in
        -i | install) fn_install "$2" "$3" ;;
        rm) fn_uninstall "$2" ;;
        ls | list) fn_list ;;
        link) fn_add_symlink "$2" ;;
        unlink) fn_remove_symlink "$2" ;;
        -u | update) fn_update "$2" ;;
        -h | --help) fn_help ;;
        -v | --version) echo "${version}" ;;
        *) fn_help ;;
        esac
    else
        fn_help
        exit
    fi
}

fn_main "$@"

# 1.some have different url/main-script
# e.g. cfenollosa/bashblog has bb.sh as main
# todotxt/todo.txt-cli has todo.sh

# 2. some main file has .sh
