#!/usr/bin/env bash

version="0.0.8"
awesome_dir="$HOME/awesome"
bin_dir="$HOME/bin"
# check if awesome dir exist. if not create it and add $HOME/awesome path to config file
fn_checkDir() {
    if [[ -z $1 ]]; then
        echo "Specify the directory." >&2
        exit
    fi
    if [[ ! -d $1 ]]; then
        mkdir "$1"
        echo "$1 directory is created." >&2
        exit
    fi
}

fn_check_cmd() {
    if [ ! "$(command -v "$1")" ]; then
        echo "Please install $1" >&2
        exit 1
    fi
}

# search the main script
fn_search_main() {
    repo=$1
    # repo_name=basename $(find . -name ${repo})
    cd "$awesome_dir/$repo" || return
    IFS= read -r -d '' repo < <(find . '(' -name "${repo##*/}" -o -name "${repo##*/}.sh" ')' -print0)
    if [[ $repo ]]; then
        printf '%s\n' $(basename $repo)
    else
        return 1
    fi
    echo $repo_name
}

# create a symlink in bin. repo_name and file_name can be different
fn_create_symlink() {
    # find the name of repo
    base_name=$1
    repo_name=$2
    # echo $base_name
    # echo $repo_name
    # exit
    # echo '${awesome_dir}/${base_name}/${repo_name}'
    # add a symlink
    ln -sf "${awesome_dir}/$1/$2" "${bin_dir}/$2"
    echo "Created a symlink."
    exit
}

# fn_install run git clone and create a symlink
fn_install() {
    if [[ -z $1 ]]; then
        echo "You need to specify the GitHub repo URL." >&2
        exit 1
    fi
    fn_checkDir "$awesome_dir"
    fn_checkDir "$bin_dir"
    fn_check_cmd git
    cd "$awesome_dir" || return
    url=$1
    # echo "Cloning ..."
    # git clone $url || exit 1
    # echo "Done cloning."
    repo_base=$(basename "$1" .git)
    git clone "${url}" || exit
    # run fn_search_main to find out the main script
    # todo if you can't find the same file name as the directory, show the tree to select the main file.
    file_name=$(fn_search_main ${repo_base})
    # echo "Creating a symlink ..."
    # fn_create_symlink $repo_base $file_name || eixt
    fn_create_symlink "${repo_base}" "${file_name}" || exit
    echo "${repo} installation completed." >&2
    echo "Try ${repo} -h or which ${repo}." >&2
}

# fn_uninstall removes a symlink and repo
fn_uninstall() {
    cd "$awesome_dir" || exit
    repo=$1
    echo "Removing the $repo directory ..."
    rm -rf "${repo}" || exit
    echo "$repo directory removed."
    fn_remove_symlink ${repo} || exit
    exit
}

# fn_remove removes a symlink
fn_remove_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    fi
    echo "Removing the symlink ..."
    cd "$bin_dir" || exit
    rm "${1}" || exit
    echo "Symlink removed." >&2
    exit
}

fn_add_symlink() {
    if [[ -z $1 ]]; then
        echo "Specify the repo to remove." >&2
        exit 1
    fi
    fn_create_symlink "$1" || exit
    echo "Symlink added." >&2
    exit
}

# fn_update run git pull
fn_update() {
    cd "$awesome_dir/${1}" || exit
    git pull || exit
    exit
}

# fn_list list installed packages
fn_list() {
    ls "$awesome_dir"
    exit
}

fn_help() {
    cat <<EOF
Description: Awesome install a package from a GitHub repo on your macOS/Linux.

Usage: awesome [-h] [command]
    install    install a package from a GitHub repo and create a symlink in ~/bin
    uninstall  uninstall a package and remove a symlink
    remove-sym remove a package symlink 
    update     check an update and install a new package
    -h, --help show this help message and exit"

Examples:
    Install a package
    awesome install https://github.com/shinokada/gitstart.git

    Uninstall a package
    awesome uninstall gitstart

    Update a package
    awesome update gitstart

    Show installed packages
    awesome list

    Remove a symlink
    awesome remove gitstart

    Show this help
    awesome -h
EOF
    exit
}

fn_main() {
    if (($# > 0)); then
        case $1 in
        install)
            fn_install "$2"
            ;;
        uninstall) fn_uninstall "$2" ;;
        "add") fn_add_symlink "$2" ;;
        "remove") fn_remove_symlink "$2" ;;
        "update") fn_update "$2" ;;
        "list") fn_list ;;
        "-h") fn_help ;;
        "-v" | --version) echo "${version}" ;;
        "--help") fn_help ;;
        *) fn_help ;;
        esac
    else
        fn_help
        exit
    fi
}

fn_main "$@"

# 1.some have different url/main-script
# e.g. cfenollosa/bashblog has bb.sh as main
# todotxt/todo.txt-cli has todo.sh

# 2. some main file has .sh
